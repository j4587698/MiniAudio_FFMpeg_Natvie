name: Cross Platform Build

on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  BUILD_DIR: ${{ github.workspace }}/build
  ARTIFACT_DIR: ${{ github.workspace }}/artifacts

jobs:
  windows:
    name: Windows x64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MinGW
      run: |
        sudo apt-get update
        # 安装 MinGW-w64 工具链（包含 posix 线程和异常处理）
        sudo apt-get install -y \
          mingw-w64 \
          wine64

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/win64 \
          -DCMAKE_TOOLCHAIN_FILE=cross_toolchain.cmake \
          -DCROSS_TARGET=Windows \
          -DCROSS_ARCH=x86_64-windows

    - name: Build
      run: cmake --build $BUILD_DIR/win64 --config Release -- -j1 VERBOSE=1

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/win64
        cp $BUILD_DIR/win64/bin/*.dll $ARTIFACT_DIR/win64/

    - uses: actions/upload-artifact@v4
      with:
        name: windows-x64-binaries
        path: $ARTIFACT_DIR/win64/

  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, aarch64, x86_64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Cross Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu


    - name: Configure
      run: |
        cmake -B $BUILD_DIR/linux-${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=cross_toolchain.cmake \
          -DCROSS_TARGET=Linux \
          -DCROSS_ARCH=${{ matrix.arch }}

    - name: Build
      run: cmake --build $BUILD_DIR/linux-${{ matrix.arch }} -- -j1 VERBOSE=1

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/linux-${{ matrix.arch }}
        cp $BUILD_DIR/linux-${{ matrix.arch }}/lib/*.so $ARTIFACT_DIR/linux-${{ matrix.arch }}/

    - uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}-binaries
        path: $ARTIFACT_DIR/linux-${{ matrix.arch }}/

  macos:
    name: macOS Universal
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_15.4.app
        sudo xcodebuild -license accept
        xcrun --show-sdk-path  # 验证 SDK 路径

    - name: Configure
      run: |
        cmake -B build/macos \
          -DCMAKE_TOOLCHAIN_FILE=cross_toolchain.cmake \
          -DCROSS_TARGET=macOS \
          -DCMAKE_OSX_ARCHITECTURES="arm64"  # 明确指定单一架构

    - name: Build
      run: cmake --build $BUILD_DIR/macos --config Release -- -j1 VERBOSE=1

    - name: Create Universal Binary
      run: |
        lipo -create -output $ARTIFACT_DIR/macos/libaudio_player.dylib \
          $BUILD_DIR/macos/lib/*.dylib

    - uses: actions/upload-artifact@v4
      with:
        name: macos-universal-binaries
        path: $ARTIFACT_DIR/macos/

  android:
    name: Android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [arm, aarch64, x86_64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup NDK
      uses: android-actions/setup-android@v2

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/android-${{ matrix.abi }} \
          -DCMAKE_TOOLCHAIN_FILE=cross_toolchain.cmake \
          -DCROSS_TARGET=Android \
          -DCROSS_ARCH=${{ matrix.abi }}
          -DANDROID_ABI=${{ matrix.abi }}

    - name: Build
      run: cmake --build $BUILD_DIR/android-${{ matrix.abi }}  -- -j1 VERBOSE=1

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/android-${{ matrix.abi }}
        cp $BUILD_DIR/android-${{ matrix.abi }}/lib/*.so $ARTIFACT_DIR/android-${{ matrix.abi }}/

    - uses: actions/upload-artifact@v4
      with:
        name: android-${{ matrix.abi }}-binaries
        path: $ARTIFACT_DIR/android-${{ matrix.abi }}/

