name: Cross Platform Build

on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  BUILD_DIR: ${{ github.workspace }}/build
  ARTIFACT_DIR: ${{ github.workspace }}/artifacts

jobs:
  windows:
    name: Windows x64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MinGW
      run: |
        sudo apt-get update
        # 安装 MinGW-w64 工具链（包含 posix 线程和异常处理）
        sudo apt-get install -y \
          mingw-w64 \
          wine64

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/win64 \
          -DCMAKE_TOOLCHAIN_FILE=windows.toolchain.cmake \
          -DCROSS_ARCH=x86_64

    - name: Build
      run: cmake --build $BUILD_DIR/win64 --config Release -- -j$(nproc)

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/win64
        cp $BUILD_DIR/win64/bin/*.dll $ARTIFACT_DIR/win64/

    - uses: actions/upload-artifact@v4
      with:
        name: windows-x64-binaries
        path: ${{env.ARTIFACT_DIR}}/win64/libaudio_player.dll

  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, aarch64, x86_64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Cross Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu


    - name: Configure
      run: |
        cmake -B $BUILD_DIR/linux-${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=linux.toolchain.cmake \
          -DCROSS_ARCH=${{ matrix.arch }}

    - name: Build
      run: cmake --build $BUILD_DIR/linux-${{ matrix.arch }} -- -j$(nproc)

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/linux-${{ matrix.arch }}
        cp $BUILD_DIR/linux-${{ matrix.arch }}/lib/*.so $ARTIFACT_DIR/linux-${{ matrix.arch }}/
        ls $ARTIFACT_DIR/linux-${{ matrix.arch }}

    - uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}-binaries
        path: ${{env.ARTIFACT_DIR}}/linux-${{ matrix.arch }}/libaudio_player.so

  macos:
    name: macOS Universal
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ arm64, x86_64 ]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_15.4.app
        sudo xcodebuild -license accept
        xcrun --show-sdk-path  # 验证 SDK 路径

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/macos-${{ matrix.arch }} \
          -DCMAKE_TOOLCHAIN_FILE=apple.toolchain.cmake \
          -DAPPLE_PLATFORM=MACOS \
          -DAPPLE_ARCH=${{ matrix.arch }}

    - name: Build
      run: |
        # 使用tee命令捕获完整构建日志
        cmake --build $BUILD_DIR/macos-${{ matrix.arch }} --config Release -- VERBOSE=1 2>&1 | tee build.log || true

    - name: Create Universal Binary
      run: |
        mkdir -p $ARTIFACT_DIR/macos-${{ matrix.arch }}
        lipo -create -output $ARTIFACT_DIR/macos-${{ matrix.arch }}/libaudio_player.dylib \
          $BUILD_DIR/macos-${{ matrix.arch }}/lib/*.dylib

    - uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}-universal-binaries
        path: ${{env.ARTIFACT_DIR}}/macos-${{ matrix.arch }}/libaudio_player.dylib

  ios:
    name: ios
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode_15.4.app
          sudo xcodebuild -license accept
          xcrun --show-sdk-path  # 验证 SDK 路径

      - name: Configure
        run: |
          cmake -B $BUILD_DIR/ios \
            -DCMAKE_TOOLCHAIN_FILE=apple.toolchain.cmake \
            -DAPPLE_PLATFORM=IOS \
            -DAPPLE_ARCH=arm64

      - name: Build
        run: |
          # 使用tee命令捕获完整构建日志
          cmake --build $BUILD_DIR/ios --config Release -- VERBOSE=1 2>&1 | tee build.log || true
          
          # 自动定位并打印FFmpeg配置日志
          if [ -f "$BUILD_DIR/ios/ffmpeg/src/ffmpeg-build/ffbuild/config.log" ]; then
          echo "↓↓↓↓↓↓ FFmpeg config.log ↓↓↓↓↓↓"
          tail -100 $BUILD_DIR/ios/ffmpeg/src/ffmpeg-build/ffbuild/config.log
          echo "↑↑↑↑↑↑ FFmpeg config.log ↑↑↑↑↑↑"
          else
          echo "⚠️ config.log not found in expected location"
          fi

      - name: Create Universal Binary
        run: |
          mkdir -p $ARTIFACT_DIR/ios 
          lipo -create -output $ARTIFACT_DIR/ios/libaudio_player.dylib \
            $BUILD_DIR/ios/lib/*.dylib

      - uses: actions/upload-artifact@v4
        with:
          name: ios
          path: ${{env.ARTIFACT_DIR}}/ios/libaudio_player.dylib

  android:
    name: Android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [armeabi-v7a, arm64-v8a, x86_64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Cross Tools
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build

    - name: Setup NDK
      uses: android-actions/setup-android@v2

    - name: Configure
      run: |
        cmake -B $BUILD_DIR/android-${{ matrix.abi }} \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DCROSS_TARGET=Android \
          -DCROSS_ARCH=${{ matrix.abi }} \
          -DANDROID_ABI=${{ matrix.abi }} \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DANDROID_NATIVE_API_LEVEL=21

    - name: Build
      run: cmake --build $BUILD_DIR/android-${{ matrix.abi }}  -- -j$(nproc)

    - name: Package
      run: |
        mkdir -p $ARTIFACT_DIR/android-${{ matrix.abi }}
        cp $BUILD_DIR/android-${{ matrix.abi }}/lib/*.so $ARTIFACT_DIR/android-${{ matrix.abi }}/

    - uses: actions/upload-artifact@v4
      with:
        name: android-${{ matrix.abi }}-binaries
        path: ${{env.ARTIFACT_DIR}}/android-${{ matrix.abi }}/libaudio_player.so

